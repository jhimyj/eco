org: ${env:ORG}
service: api-places

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 29
  iam:
    role: ${env:IAM_ROLE_ARN}
  environment:
    PLACES_TABLE: ${sls:stage}-api-places
    CONNECTIONS_TABLE: ${sls:stage}-connections
    S3_BUCKET: ${sls:stage}-api-places-eco
    INDEX_PLACE_STATUS: BusquedaPorEstado
    INDEX_PLACE_LATITUDE_LONGITUDE: BusquedaPorLatitudLongitud
    WEBSOCKET_API_ID:
      Ref: WebsocketsApi
    AWS_REGION: ${self:provider.region}
    STAGE: ${sls:stage}

functions:
  generateUrlSubmit:
    handler: generate_url_submit.lambda_handler
    events:
      - http:
          path: place/generate/urls
          method: post
          cors:
            origin: '*'  
            methods: 
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  registerPlace:
    handler: place_register.lambda_handler
    events:
      - http:
          path: place/register
          method: post
          cors:
            origin: '*'  
            methods: 
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  getFilesPlace:
    handler: place_get_files.lambda_handler
    events:
      - http:
          path: place/get/files
          method: get
          cors:
            origin: '*'  
            methods: 
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  getPlace:
    handler: place_get.lambda_handler
    events:
      - http:
          path: place/{place_id}
          method: get
          cors:
            origin: '*'  
            methods: 
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  
  getPlaceAll:
    handler: place_get_all.lambda_handler
    events:
      - http:
          path: place/all
          method: get
          cors:
            origin: '*'  
            methods: 
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  websocketConnect:
    handler: websocket.connect_handler
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: websocket.disconnect_handler
    events:
      - websocket:
          route: $disconnect

  websocketAction:
    handler: websocket.action_handler
    events:
      - websocket:
          route: action

resources:
  Resources:
    TiendaGrupoNahiaYCompaniaBucketProyecto:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        AccessControl: Private
        VersioningConfiguration:
          Status: Enabled  

    PlacesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PLACES_TABLE}
        AttributeDefinitions:
          - AttributeName: place_id
            AttributeType: S
          - AttributeName: latitude
            AttributeType: N
          - AttributeName: longitude
            AttributeType: N
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: place_id
            KeyType: HASH  
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_PLACE_STATUS}
            KeySchema:
              - AttributeName: status
                KeyType: HASH  
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.INDEX_PLACE_LATITUDE_LONGITUDE}
            KeySchema:
              - AttributeName: latitude
                KeyType: HASH  
              - AttributeName: longitude
                KeyType: RANGE  
            Projection:
              ProjectionType: ALL

    ConnectionsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

  Outputs:
    S3BucketName:
      Value: ${self:provider.environment.S3_BUCKET}
      Description: "El nombre del bucket S3"
    WebSocketApiId:
      Value:
        Ref: WebsocketsApi
      Export:
        Name: ${self:service}-${sls:stage}-WebSocketApiId
