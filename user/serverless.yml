org: ${env:ORG}
service: api-users

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 29
  iam:
    role: ${env:IAM_ROLE_ARN}  # Asegúrate de que IAM_ROLE_ARN esté correctamente configurado en tu entorno
  environment:
    USERS_TABLE: ${sls:stage}-api-users
    TOKENS_TABLE: ${sls:stage}-t_tokens_acceso
    VALIDAR_TOKEN_LAMBDA_NAME: ${self:service}-${sls:stage}-ValidarTokenAcceso
    SECRET_KEY: my_secret  # Puedes reemplazar esto con una variable de entorno si lo deseas
    INDEX_EMAIL_NAME: BusquedaPorEmail
    COGNITO_USER_POOL_ARN: ${env:COGNITO_USER_POOL_ARN}  # Reemplaza con tu ARN de Cognito User Pool

functions:
  registerUser:
    handler: register_user.lambda_handler
    events:
      - http:
          path: user/register
          method: post
          cors:
            origin: '*'  
            methods: 
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  loginUser:
    handler: login_user.lambda_handler
    events:
      - http:
          path: user/login
          method: post
          cors:
            origin: '*'  
            methods: 
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  getUserMe:
    handler: get_user_me.lambda_handler
    events:
      - http:
          path: user/me
          method: get
          cors:
            origin: '*'  
            methods: 
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  
  prueba:
    handler: prueba.lambda_handler
    events:
      - http:
          path: prueba
          method: get
          cors:
            origin: '*'
            methods:
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            authorizer:
              name: authorizer
              arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}

resources:
  Resources:
    UsuariosDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH  
        BillingMode: PAY_PER_REQUEST  
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_EMAIL_NAME}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

