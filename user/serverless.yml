org: ${env:ORG}
service: api-users

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 29
  iam:
    role: ${env:IAM_ROLE_ARN}  
  environment:
    USERS_TABLE: ${sls:stage}-api-users
    COGNITO_USER_POOL_ARN: ${env:COGNITO_USER_POOL_ARN}
    USER_POOL_ID: ${env:USER_POOL_ID}
    S3_BUCKET_NAME : ${sls:stage}-api-users-eco
      

functions:
  userAddData:
    handler: user_add_data.lambda_handler
    events:
      - http:
          path: user/me/auth/data
          method: post
          cors:
            origin: '*'  
            methods: 
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          
  getUserMe:
    handler: user_get_me.lambda_handler
    events:
      - http:
          path: user/me/auth/data
          method: get
          cors:
            origin: '*'  
            methods: 
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
  
  updateUserMe:
    handler: user_update_data.lambda_handler
    events:
      - http:
          path: user/me/auth/data
          method: patch
          cors:
            origin: '*'  
            methods: 
              - PATCH
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
  
  deleteUserMe:
    handler: user_delete_me.lambda_handler
    events:
      - http:
          path: user/me/auth/data
          method: delete
          cors:
            origin: '*'  
            methods: 
              - DELETE
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  generate_url_submit_image:
    handler: user_generate_url_submit_image.lambda_handler
    events:
      - http:
          path: user/me/auth/image/generate/url
          method: post
          cors:
            origin: '*'  
            methods: 
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  generate_url_get_image:
    handler: user_generate_url_read_image.lambda_handler
    events:
      - http:
          path: user/me/auth/image/generate/url
          method: get
          cors:
            origin: '*'  
            methods: 
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  delete_image:
    handler: user_delete_image_perfile.lambda_handler
    events:
      - http:
          path: user/me/auth/image
          method: delete
          cors:
            origin: '*'  
            methods: 
              - DELETE
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  prueba:
    handler: prueba.lambda_handler
    events:
      - http:
          path: prueba
          method: get
          cors:
            origin: '*'
            methods:
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

resources:
  Resources:
    BucketApiUsers:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        AccessControl: Private
        VersioningConfiguration:
          Status: Enabled

    UsuariosDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH  
        BillingMode: PAY_PER_REQUEST 

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: "method.request.header.Authorization"
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - ${self:provider.environment.COGNITO_USER_POOL_ARN}
